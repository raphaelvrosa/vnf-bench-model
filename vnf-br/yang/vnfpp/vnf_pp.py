# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class yc_origin_vnf_pp__vnf_pp_reports_snapshots_origin(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vnf-pp - based on the path /vnf-pp/reports/snapshots/origin. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Trial when the snapshot was obtained.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__role','__host',)

  _yang_name = 'origin'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__role = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="role", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__host = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="host", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['vnf-pp', 'reports', 'snapshots', 'origin']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /vnf_pp/reports/snapshots/origin/id (string)

    YANG Description: Unique origin identifier, i.e., agent or monitor identifier.
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /vnf_pp/reports/snapshots/origin/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Unique origin identifier, i.e., agent or monitor identifier.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_role(self):
    """
    Getter method for role, mapped from YANG variable /vnf_pp/reports/snapshots/origin/role (string)

    YANG Description: Role of the component, origin of the snapshop, i.e., agent or monitor.
    """
    return self.__role
      
  def _set_role(self, v, load=False):
    """
    Setter method for role, mapped from YANG variable /vnf_pp/reports/snapshots/origin/role (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_role is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_role() directly.

    YANG Description: Role of the component, origin of the snapshop, i.e., agent or monitor.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="role", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """role must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="role", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__role = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_role(self):
    self.__role = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="role", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_host(self):
    """
    Getter method for host, mapped from YANG variable /vnf_pp/reports/snapshots/origin/host (string)

    YANG Description: Host name where the source of the snapshot was placed.
    """
    return self.__host
      
  def _set_host(self, v, load=False):
    """
    Setter method for host, mapped from YANG variable /vnf_pp/reports/snapshots/origin/host (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_host is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_host() directly.

    YANG Description: Host name where the source of the snapshot was placed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="host", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """host must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="host", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__host = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_host(self):
    self.__host = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="host", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  role = __builtin__.property(_get_role, _set_role)
  host = __builtin__.property(_get_host, _set_host)


  _pyangbind_elements = OrderedDict([('id', id), ('role', role), ('host', host), ])


class yc_source_vnf_pp__vnf_pp_reports_snapshots_evaluations_source(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vnf-pp - based on the path /vnf-pp/reports/snapshots/evaluations/source. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Details regarding the source of the evaluation.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__name','__type','__version','__call',)

  _yang_name = 'source'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__version = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__call = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="call", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['vnf-pp', 'reports', 'snapshots', 'evaluations', 'source']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/source/id (string)

    YANG Description: Unique source id
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/source/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Unique source id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/source/name (string)

    YANG Description: Name of the source of the evaluation.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/source/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name of the source of the evaluation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/source/type (string)

    YANG Description: Type of the evaluation source, i.e., prober or listener.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/source/type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Type of the evaluation source, i.e., prober or listener.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_version(self):
    """
    Getter method for version, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/source/version (string)

    YANG Description: Version of the tool interfacing the prober/listener.
    """
    return self.__version
      
  def _set_version(self, v, load=False):
    """
    Setter method for version, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/source/version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_version() directly.

    YANG Description: Version of the tool interfacing the prober/listener.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_version(self):
    self.__version = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_call(self):
    """
    Getter method for call, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/source/call (string)

    YANG Description: Full call realized by the source of evaluation.
    """
    return self.__call
      
  def _set_call(self, v, load=False):
    """
    Setter method for call, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/source/call (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_call is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_call() directly.

    YANG Description: Full call realized by the source of evaluation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="call", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """call must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="call", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__call = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_call(self):
    self.__call = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="call", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  name = __builtin__.property(_get_name, _set_name)
  type = __builtin__.property(_get_type, _set_type)
  version = __builtin__.property(_get_version, _set_version)
  call = __builtin__.property(_get_call, _set_call)


  _pyangbind_elements = OrderedDict([('id', id), ('name', name), ('type', type), ('version', version), ('call', call), ])


class yc_timestamp_vnf_pp__vnf_pp_reports_snapshots_evaluations_timestamp(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vnf-pp - based on the path /vnf-pp/reports/snapshots/evaluations/timestamp. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Timestamps of the procedures that realized the extraction of the evaluation.
  """
  __slots__ = ('_path_helper', '_extmethods', '__start','__stop',)

  _yang_name = 'timestamp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__start = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__stop = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="stop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['vnf-pp', 'reports', 'snapshots', 'evaluations', 'timestamp']

  def _get_start(self):
    """
    Getter method for start, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/timestamp/start (string)

    YANG Description: Time (date, hour, minute, second) when the evaluation started
    """
    return self.__start
      
  def _set_start(self, v, load=False):
    """
    Setter method for start, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/timestamp/start (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start() directly.

    YANG Description: Time (date, hour, minute, second) when the evaluation started
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__start = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start(self):
    self.__start = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_stop(self):
    """
    Getter method for stop, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/timestamp/stop (string)

    YANG Description: Time (date, hour, minute, second) when the evaluation stopped
    """
    return self.__stop
      
  def _set_stop(self, v, load=False):
    """
    Setter method for stop, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/timestamp/stop (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stop() directly.

    YANG Description: Time (date, hour, minute, second) when the evaluation stopped
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="stop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stop must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="stop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__stop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stop(self):
    self.__stop = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="stop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)

  start = __builtin__.property(_get_start, _set_start)
  stop = __builtin__.property(_get_stop, _set_stop)


  _pyangbind_elements = OrderedDict([('start', start), ('stop', stop), ])


class yc_tuple_vector_vnf_pp__vnf_pp_reports_snapshots_evaluations_metrics_tuple_vector(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vnf-pp - based on the path /vnf-pp/reports/snapshots/evaluations/metrics/tuple-vector. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of key/values e.g. timeseries.
  """
  __slots__ = ('_path_helper', '_extmethods', '__key','__value',)

  _yang_name = 'tuple-vector'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__key = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="key", parent=self, choice=('value', 'tuple-vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__value = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="value", parent=self, choice=('value', 'tuple-vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['vnf-pp', 'reports', 'snapshots', 'evaluations', 'metrics', 'tuple-vector']

  def _get_key(self):
    """
    Getter method for key, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/tuple_vector/key (string)

    YANG Description: Tuple key.
    """
    return self.__key
      
  def _set_key(self, v, load=False):
    """
    Setter method for key, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/tuple_vector/key (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_key() directly.

    YANG Description: Tuple key.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="key", parent=self, choice=('value', 'tuple-vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """key must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="key", parent=self, choice=('value', 'tuple-vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_key(self):
    self.__key = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="key", parent=self, choice=('value', 'tuple-vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_value(self):
    """
    Getter method for value, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/tuple_vector/value (string)

    YANG Description: Tuple value.
    """
    return self.__value
      
  def _set_value(self, v, load=False):
    """
    Setter method for value, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/tuple_vector/value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_value() directly.

    YANG Description: Tuple value.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="value", parent=self, choice=('value', 'tuple-vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="value", parent=self, choice=('value', 'tuple-vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_value(self):
    self.__value = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="value", parent=self, choice=('value', 'tuple-vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)

  key = __builtin__.property(_get_key, _set_key)
  value = __builtin__.property(_get_value, _set_value)

  __choices__ = {'value': {'tuple-vector': ['key', 'value']}}
  _pyangbind_elements = OrderedDict([('key', key), ('value', value), ])


class yc_metrics_vnf_pp__vnf_pp_reports_snapshots_evaluations_metrics(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vnf-pp - based on the path /vnf-pp/reports/snapshots/evaluations/metrics. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of metrics obtained by evaluation.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__unit','__type','__scalar','__vector','__tuple_vector',)

  _yang_name = 'metrics'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__unit = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="unit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__scalar = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="scalar", parent=self, choice=('value', 'scalar'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__vector = YANGDynClass(unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="vector", parent=self, choice=('value', 'vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__tuple_vector = YANGDynClass(base=YANGListType("key",yc_tuple_vector_vnf_pp__vnf_pp_reports_snapshots_evaluations_metrics_tuple_vector, yang_name="tuple-vector", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='key', extensions=None, choice=False), is_container='list', yang_name="tuple-vector", parent=self, choice=('value', 'tuple-vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['vnf-pp', 'reports', 'snapshots', 'evaluations', 'metrics']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/name (string)

    YANG Description: Metric name
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Metric name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_unit(self):
    """
    Getter method for unit, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/unit (string)

    YANG Description: Unit of the metric value(s)
    """
    return self.__unit
      
  def _set_unit(self, v, load=False):
    """
    Setter method for unit, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/unit (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unit() directly.

    YANG Description: Unit of the metric value(s)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="unit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unit must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="unit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__unit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unit(self):
    self.__unit = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="unit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/type (string)

    YANG Description: The data type encoded in the value.
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: The data type encoded in the value.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_scalar(self):
    """
    Getter method for scalar, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/scalar (string)

    YANG Description: Single value
    """
    return self.__scalar
      
  def _set_scalar(self, v, load=False):
    """
    Setter method for scalar, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/scalar (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_scalar is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_scalar() directly.

    YANG Description: Single value
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="scalar", parent=self, choice=('value', 'scalar'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """scalar must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="scalar", parent=self, choice=('value', 'scalar'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__scalar = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_scalar(self):
    self.__scalar = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="scalar", parent=self, choice=('value', 'scalar'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_vector(self):
    """
    Getter method for vector, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/vector (string)

    YANG Description: List of values
    """
    return self.__vector
      
  def _set_vector(self, v, load=False):
    """
    Setter method for vector, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/vector (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vector is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vector() directly.

    YANG Description: List of values
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="vector", parent=self, choice=('value', 'vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vector must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="vector", parent=self, choice=('value', 'vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__vector = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vector(self):
    self.__vector = YANGDynClass(unique=True, base=TypedListType(allowed_type=six.text_type), is_leaf=False, yang_name="vector", parent=self, choice=('value', 'vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_tuple_vector(self):
    """
    Getter method for tuple_vector, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/tuple_vector (list)

    YANG Description: List of key/values e.g. timeseries.
    """
    return self.__tuple_vector
      
  def _set_tuple_vector(self, v, load=False):
    """
    Setter method for tuple_vector, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics/tuple_vector (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tuple_vector is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tuple_vector() directly.

    YANG Description: List of key/values e.g. timeseries.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("key",yc_tuple_vector_vnf_pp__vnf_pp_reports_snapshots_evaluations_metrics_tuple_vector, yang_name="tuple-vector", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='key', extensions=None, choice=False), is_container='list', yang_name="tuple-vector", parent=self, choice=('value', 'tuple-vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tuple_vector must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("key",yc_tuple_vector_vnf_pp__vnf_pp_reports_snapshots_evaluations_metrics_tuple_vector, yang_name="tuple-vector", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='key', extensions=None, choice=False), is_container='list', yang_name="tuple-vector", parent=self, choice=('value', 'tuple-vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)""",
        })

    self.__tuple_vector = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tuple_vector(self):
    self.__tuple_vector = YANGDynClass(base=YANGListType("key",yc_tuple_vector_vnf_pp__vnf_pp_reports_snapshots_evaluations_metrics_tuple_vector, yang_name="tuple-vector", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='key', extensions=None, choice=False), is_container='list', yang_name="tuple-vector", parent=self, choice=('value', 'tuple-vector'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  unit = __builtin__.property(_get_unit, _set_unit)
  type = __builtin__.property(_get_type, _set_type)
  scalar = __builtin__.property(_get_scalar, _set_scalar)
  vector = __builtin__.property(_get_vector, _set_vector)
  tuple_vector = __builtin__.property(_get_tuple_vector, _set_tuple_vector)

  __choices__ = {'value': {'scalar': ['scalar'], 'vector': ['vector'], 'tuple-vector': ['tuple_vector']}}
  _pyangbind_elements = OrderedDict([('name', name), ('unit', unit), ('type', type), ('scalar', scalar), ('vector', vector), ('tuple_vector', tuple_vector), ])


class yc_evaluations_vnf_pp__vnf_pp_reports_snapshots_evaluations(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vnf-pp - based on the path /vnf-pp/reports/snapshots/evaluations. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of evaluations contained in a single snapshot.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__source','__timestamp','__metrics',)

  _yang_name = 'evaluations'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__source = YANGDynClass(base=yc_source_vnf_pp__vnf_pp_reports_snapshots_evaluations_source, is_container='container', yang_name="source", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)
    self.__timestamp = YANGDynClass(base=yc_timestamp_vnf_pp__vnf_pp_reports_snapshots_evaluations_timestamp, is_container='container', yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)
    self.__metrics = YANGDynClass(base=YANGListType("name",yc_metrics_vnf_pp__vnf_pp_reports_snapshots_evaluations_metrics, yang_name="metrics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['vnf-pp', 'reports', 'snapshots', 'evaluations']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/id (string)

    YANG Description: Unique id
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Unique id
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_source(self):
    """
    Getter method for source, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/source (container)

    YANG Description: Details regarding the source of the evaluation.
    """
    return self.__source
      
  def _set_source(self, v, load=False):
    """
    Setter method for source, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/source (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source() directly.

    YANG Description: Details regarding the source of the evaluation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_source_vnf_pp__vnf_pp_reports_snapshots_evaluations_source, is_container='container', yang_name="source", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_source_vnf_pp__vnf_pp_reports_snapshots_evaluations_source, is_container='container', yang_name="source", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)""",
        })

    self.__source = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source(self):
    self.__source = YANGDynClass(base=yc_source_vnf_pp__vnf_pp_reports_snapshots_evaluations_source, is_container='container', yang_name="source", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)


  def _get_timestamp(self):
    """
    Getter method for timestamp, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/timestamp (container)

    YANG Description: Timestamps of the procedures that realized the extraction of the evaluation.
    """
    return self.__timestamp
      
  def _set_timestamp(self, v, load=False):
    """
    Setter method for timestamp, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/timestamp (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_timestamp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_timestamp() directly.

    YANG Description: Timestamps of the procedures that realized the extraction of the evaluation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_timestamp_vnf_pp__vnf_pp_reports_snapshots_evaluations_timestamp, is_container='container', yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """timestamp must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_timestamp_vnf_pp__vnf_pp_reports_snapshots_evaluations_timestamp, is_container='container', yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)""",
        })

    self.__timestamp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_timestamp(self):
    self.__timestamp = YANGDynClass(base=yc_timestamp_vnf_pp__vnf_pp_reports_snapshots_evaluations_timestamp, is_container='container', yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)


  def _get_metrics(self):
    """
    Getter method for metrics, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics (list)

    YANG Description: List of metrics obtained by evaluation.
    """
    return self.__metrics
      
  def _set_metrics(self, v, load=False):
    """
    Setter method for metrics, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations/metrics (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metrics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metrics() directly.

    YANG Description: List of metrics obtained by evaluation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_metrics_vnf_pp__vnf_pp_reports_snapshots_evaluations_metrics, yang_name="metrics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metrics must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_metrics_vnf_pp__vnf_pp_reports_snapshots_evaluations_metrics, yang_name="metrics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)""",
        })

    self.__metrics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metrics(self):
    self.__metrics = YANGDynClass(base=YANGListType("name",yc_metrics_vnf_pp__vnf_pp_reports_snapshots_evaluations_metrics, yang_name="metrics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  source = __builtin__.property(_get_source, _set_source)
  timestamp = __builtin__.property(_get_timestamp, _set_timestamp)
  metrics = __builtin__.property(_get_metrics, _set_metrics)


  _pyangbind_elements = OrderedDict([('id', id), ('source', source), ('timestamp', timestamp), ('metrics', metrics), ])


class yc_snapshots_vnf_pp__vnf_pp_reports_snapshots(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vnf-pp - based on the path /vnf-pp/reports/snapshots. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of snapshots contained in a single report.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__trial','__origin','__evaluations',)

  _yang_name = 'snapshots'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__trial = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="trial", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='uint32', is_config=True)
    self.__origin = YANGDynClass(base=yc_origin_vnf_pp__vnf_pp_reports_snapshots_origin, is_container='container', yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)
    self.__evaluations = YANGDynClass(base=YANGListType("id",yc_evaluations_vnf_pp__vnf_pp_reports_snapshots_evaluations, yang_name="evaluations", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="evaluations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['vnf-pp', 'reports', 'snapshots']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /vnf_pp/reports/snapshots/id (string)

    YANG Description: Unique identifier.
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /vnf_pp/reports/snapshots/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Unique identifier.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_trial(self):
    """
    Getter method for trial, mapped from YANG variable /vnf_pp/reports/snapshots/trial (uint32)

    YANG Description: Trial identifier when the snapshot was obtained.
    """
    return self.__trial
      
  def _set_trial(self, v, load=False):
    """
    Setter method for trial, mapped from YANG variable /vnf_pp/reports/snapshots/trial (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_trial is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_trial() directly.

    YANG Description: Trial identifier when the snapshot was obtained.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="trial", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """trial must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="trial", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='uint32', is_config=True)""",
        })

    self.__trial = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_trial(self):
    self.__trial = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="trial", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='uint32', is_config=True)


  def _get_origin(self):
    """
    Getter method for origin, mapped from YANG variable /vnf_pp/reports/snapshots/origin (container)

    YANG Description: Trial when the snapshot was obtained.
    """
    return self.__origin
      
  def _set_origin(self, v, load=False):
    """
    Setter method for origin, mapped from YANG variable /vnf_pp/reports/snapshots/origin (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_origin is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_origin() directly.

    YANG Description: Trial when the snapshot was obtained.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_origin_vnf_pp__vnf_pp_reports_snapshots_origin, is_container='container', yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """origin must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_origin_vnf_pp__vnf_pp_reports_snapshots_origin, is_container='container', yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)""",
        })

    self.__origin = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_origin(self):
    self.__origin = YANGDynClass(base=yc_origin_vnf_pp__vnf_pp_reports_snapshots_origin, is_container='container', yang_name="origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)


  def _get_evaluations(self):
    """
    Getter method for evaluations, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations (list)

    YANG Description: List of evaluations contained in a single snapshot.
    """
    return self.__evaluations
      
  def _set_evaluations(self, v, load=False):
    """
    Setter method for evaluations, mapped from YANG variable /vnf_pp/reports/snapshots/evaluations (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_evaluations is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_evaluations() directly.

    YANG Description: List of evaluations contained in a single snapshot.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("id",yc_evaluations_vnf_pp__vnf_pp_reports_snapshots_evaluations, yang_name="evaluations", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="evaluations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """evaluations must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("id",yc_evaluations_vnf_pp__vnf_pp_reports_snapshots_evaluations, yang_name="evaluations", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="evaluations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)""",
        })

    self.__evaluations = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_evaluations(self):
    self.__evaluations = YANGDynClass(base=YANGListType("id",yc_evaluations_vnf_pp__vnf_pp_reports_snapshots_evaluations, yang_name="evaluations", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="evaluations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  trial = __builtin__.property(_get_trial, _set_trial)
  origin = __builtin__.property(_get_origin, _set_origin)
  evaluations = __builtin__.property(_get_evaluations, _set_evaluations)


  _pyangbind_elements = OrderedDict([('id', id), ('trial', trial), ('origin', origin), ('evaluations', evaluations), ])


class yc_reports_vnf_pp__vnf_pp_reports(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vnf-pp - based on the path /vnf-pp/reports. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of reports obtained in a vnf-pp.
  """
  __slots__ = ('_path_helper', '_extmethods', '__test','__snapshots',)

  _yang_name = 'reports'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__test = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="test", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='uint32', is_config=True)
    self.__snapshots = YANGDynClass(base=YANGListType("id",yc_snapshots_vnf_pp__vnf_pp_reports_snapshots, yang_name="snapshots", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="snapshots", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['vnf-pp', 'reports']

  def _get_test(self):
    """
    Getter method for test, mapped from YANG variable /vnf_pp/reports/test (uint32)

    YANG Description: Test identifier when the snapshot was obtained.
    """
    return self.__test
      
  def _set_test(self, v, load=False):
    """
    Setter method for test, mapped from YANG variable /vnf_pp/reports/test (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_test is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_test() directly.

    YANG Description: Test identifier when the snapshot was obtained.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="test", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """test must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="test", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='uint32', is_config=True)""",
        })

    self.__test = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_test(self):
    self.__test = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="test", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='uint32', is_config=True)


  def _get_snapshots(self):
    """
    Getter method for snapshots, mapped from YANG variable /vnf_pp/reports/snapshots (list)

    YANG Description: List of snapshots contained in a single report.
    """
    return self.__snapshots
      
  def _set_snapshots(self, v, load=False):
    """
    Setter method for snapshots, mapped from YANG variable /vnf_pp/reports/snapshots (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snapshots is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snapshots() directly.

    YANG Description: List of snapshots contained in a single report.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("id",yc_snapshots_vnf_pp__vnf_pp_reports_snapshots, yang_name="snapshots", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="snapshots", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snapshots must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("id",yc_snapshots_vnf_pp__vnf_pp_reports_snapshots, yang_name="snapshots", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="snapshots", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)""",
        })

    self.__snapshots = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snapshots(self):
    self.__snapshots = YANGDynClass(base=YANGListType("id",yc_snapshots_vnf_pp__vnf_pp_reports_snapshots, yang_name="snapshots", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id', extensions=None), is_container='list', yang_name="snapshots", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)

  test = __builtin__.property(_get_test, _set_test)
  snapshots = __builtin__.property(_get_snapshots, _set_snapshots)


  _pyangbind_elements = OrderedDict([('test', test), ('snapshots', snapshots), ])


class yc_vnf_pp_vnf_pp__vnf_pp(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vnf-pp - based on the path /vnf-pp. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A VNF-PP.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__name','__version','__author','__description','__timestamp','__reports',)

  _yang_name = 'vnf-pp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__version = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__author = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="author", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__description = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__timestamp = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    self.__reports = YANGDynClass(base=YANGListType("test",yc_reports_vnf_pp__vnf_pp_reports, yang_name="reports", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='test', extensions=None), is_container='list', yang_name="reports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['vnf-pp']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /vnf_pp/id (string)

    YANG Description: Unique identifier
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /vnf_pp/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Unique identifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /vnf_pp/name (string)

    YANG Description: Name of the experiment
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /vnf_pp/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name of the experiment
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_version(self):
    """
    Getter method for version, mapped from YANG variable /vnf_pp/version (string)

    YANG Description: Version of the experiment
    """
    return self.__version
      
  def _set_version(self, v, load=False):
    """
    Setter method for version, mapped from YANG variable /vnf_pp/version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_version() directly.

    YANG Description: Version of the experiment
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_version(self):
    self.__version = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_author(self):
    """
    Getter method for author, mapped from YANG variable /vnf_pp/author (string)

    YANG Description: Author of the experiment
    """
    return self.__author
      
  def _set_author(self, v, load=False):
    """
    Setter method for author, mapped from YANG variable /vnf_pp/author (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_author is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_author() directly.

    YANG Description: Author of the experiment
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="author", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """author must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="author", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__author = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_author(self):
    self.__author = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="author", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /vnf_pp/description (string)

    YANG Description: Description of the experiment
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /vnf_pp/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: Description of the experiment
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_timestamp(self):
    """
    Getter method for timestamp, mapped from YANG variable /vnf_pp/timestamp (string)

    YANG Description: Time (date, hour, minute, second) when the vnf-pp was created.
    """
    return self.__timestamp
      
  def _set_timestamp(self, v, load=False):
    """
    Setter method for timestamp, mapped from YANG variable /vnf_pp/timestamp (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_timestamp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_timestamp() directly.

    YANG Description: Time (date, hour, minute, second) when the vnf-pp was created.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """timestamp must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)""",
        })

    self.__timestamp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_timestamp(self):
    self.__timestamp = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='string', is_config=True)


  def _get_reports(self):
    """
    Getter method for reports, mapped from YANG variable /vnf_pp/reports (list)

    YANG Description: List of reports obtained in a vnf-pp.
    """
    return self.__reports
      
  def _set_reports(self, v, load=False):
    """
    Setter method for reports, mapped from YANG variable /vnf_pp/reports (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reports is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reports() directly.

    YANG Description: List of reports obtained in a vnf-pp.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("test",yc_reports_vnf_pp__vnf_pp_reports, yang_name="reports", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='test', extensions=None), is_container='list', yang_name="reports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reports must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("test",yc_reports_vnf_pp__vnf_pp_reports, yang_name="reports", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='test', extensions=None), is_container='list', yang_name="reports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)""",
        })

    self.__reports = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reports(self):
    self.__reports = YANGDynClass(base=YANGListType("test",yc_reports_vnf_pp__vnf_pp_reports, yang_name="reports", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='test', extensions=None), is_container='list', yang_name="reports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='list', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  name = __builtin__.property(_get_name, _set_name)
  version = __builtin__.property(_get_version, _set_version)
  author = __builtin__.property(_get_author, _set_author)
  description = __builtin__.property(_get_description, _set_description)
  timestamp = __builtin__.property(_get_timestamp, _set_timestamp)
  reports = __builtin__.property(_get_reports, _set_reports)


  _pyangbind_elements = OrderedDict([('id', id), ('name', name), ('version', version), ('author', author), ('description', description), ('timestamp', timestamp), ('reports', reports), ])


class vnf_pp(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vnf-pp - based on the path /vnf-pp. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Yang model for a VNF Performance Profile (VNF-PP) in the scope of IETF/BMWG
  """
  __slots__ = ('_path_helper', '_extmethods', '__vnf_pp',)

  _yang_name = 'vnf-pp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__vnf_pp = YANGDynClass(base=yc_vnf_pp_vnf_pp__vnf_pp, is_container='container', yang_name="vnf-pp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_vnf_pp(self):
    """
    Getter method for vnf_pp, mapped from YANG variable /vnf_pp (container)

    YANG Description: A VNF-PP.
    """
    return self.__vnf_pp
      
  def _set_vnf_pp(self, v, load=False):
    """
    Setter method for vnf_pp, mapped from YANG variable /vnf_pp (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vnf_pp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vnf_pp() directly.

    YANG Description: A VNF-PP.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_vnf_pp_vnf_pp__vnf_pp, is_container='container', yang_name="vnf-pp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vnf_pp must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_vnf_pp_vnf_pp__vnf_pp, is_container='container', yang_name="vnf-pp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)""",
        })

    self.__vnf_pp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vnf_pp(self):
    self.__vnf_pp = YANGDynClass(base=yc_vnf_pp_vnf_pp__vnf_pp, is_container='container', yang_name="vnf-pp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:ietf:params:xml:ns:yang:vnf-pp', defining_module='vnf-pp', yang_type='container', is_config=True)

  vnf_pp = __builtin__.property(_get_vnf_pp, _set_vnf_pp)


  _pyangbind_elements = OrderedDict([('vnf_pp', vnf_pp), ])


